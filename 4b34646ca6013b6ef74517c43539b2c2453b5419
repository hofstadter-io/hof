{"timestamp":"1687653204","author":"verdverm","description":"Once we merge my PR with the new testing infra based on Dagger, we should rebase this branch so it can make use of it here."}

{"timestamp":"1687901965","author":"verdverm","description":"@andrewhare My PR was merged, this still needs rebasing.\r\n\r\nI've also been working on some gcloud+packer+dagger on the `more-dagger` branch. I hit a point where nerdctl in docker-in-dagger was not working and went down this path. Now that I have, I may also be able to get nerdctl working in dagger more directly, tbd.\r\n\r\nIn the meantime, there are 4 VM images for testing (`gcloud compute images list --no-standard-images`) this PR. It would be good to automate this testing, even if it runs outside of CI (GHA) for now.\r\n\r\nI think the docker one does not have users assigned to the docker group by default, so sudo is need, which is one thing we want to test and say \"set yourself up with sudoless docker by...\", I think nerdctl is the same way.\r\n\r\nnerdctl-rootless and podman do not have this issue"}

{"timestamp":"1688070870","author":"verdverm","description":"Something seems wrong in your Go mod cache, keep seeing this hash mismatch for the openai library\r\n\r\n```\r\n$ go mod tidy\r\nverifying github.com/sashabaranov/go-openai@v1.9.1: checksum mismatch\r\n        downloaded: h1:3N52HkJKo9Zlo/oe1AVv5ZkCOny0ra58/ACvAxkN3MM=\r\n        go.sum:     h1:mxaX3YEKz2EqQzUWXNLgF7HSEs6QZUh0ZaVPxClUIFk=\r\n\r\nSECURITY ERROR\r\nThis download does NOT match an earlier download recorded in go.sum.\r\nThe bits may have been replaced on the origin server, or an attacker may\r\nhave intercepted the download attempt.\r\n\r\nFor more information, see 'go help module-auth'.\r\n```"}

{"timestamp":"1688422088","author":"verdverm","description":"The hard to find error in `dagger` action is here: https://github.com/hofstadter-io/hof/actions/runs/5447803566/jobs/9910243719#step:10:185"}

{"timestamp":"1688420719","author":"verdverm","location":{"commit":"d4a18c78a7a5b2edfdbb5e7e5a0d6def8e271673","path":"lib/container/client.go","range":{"startLine":16}},"description":"we might want to make docker come first, the `hof` action failure, while not because of this, did illuminate that we are using docker in the action, but workers have both docker and podman installed by default. So hof itself is picking up on this extra podman we were not aware of, and thus some things are being done with docker while others with podman. Docker is probably still the easiest to have as the default."}

{"timestamp":"1688420772","author":"verdverm","location":{"commit":"d4a18c78a7a5b2edfdbb5e7e5a0d6def8e271673","path":"lib/container/client.go","range":{"startLine":28}},"description":"We should look for a `HOF_CONTAINER_RUNTIME` variable here so the users can force a particular runtime, regardless of our fallback ordering."}

{"timestamp":"1688420818","author":"verdverm","location":{"commit":"d4a18c78a7a5b2edfdbb5e7e5a0d6def8e271673","path":"lib/container/runtime.go","range":{"startLine":112}},"description":"no `arg` here, but there is a `--filter` flag we can use to the same effect"}

{"timestamp":"1688420887","author":"verdverm","location":{"commit":"d4a18c78a7a5b2edfdbb5e7e5a0d6def8e271673","path":"lib/container/runtime.go","range":{"startLine":151}},"description":"Do we need to deal with exposing ports here?  I was using the equivalent of the \"expose all\" option to docker, via the sdk, the docker cli has a flag for this, but the other runtimes do not iirc. (which is where the newer runtimes are a PITA)\r\n\r\nWe were going to manually find the next available port starting at some arbitrary value like 4242. "}
