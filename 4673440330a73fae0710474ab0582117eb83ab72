{"timestamp":"1681869703","author":"verdverm","description":"where do we add the metadata to the image? we probably need to at least set the manifest type, yea?"}

{"timestamp":"1681872570","author":"andrewhare","description":"\u003e where do we add the metadata to the image? we probably need to at least set the manifest type, yea?\r\n\r\nGood thought. I will add that."}

{"timestamp":"1681923971","author":"verdverm","description":"We need to think about module mirroring, and import path constraints we have considered. How can someone mirror modules or use something like Harbor?\r\n\r\nMaybe this is what GOPROXY | CUEPROXY would hold? Map this pattern to this IP or domain, and by explicitly setting you know you are in advanced territory?\r\n\r\nhttps://go.dev/ref/mod#module-proxy"}

{"timestamp":"1682209493","author":"andrewhare","description":"@verdverm I've committed some more work but it's still WIP. The main things to note are:\r\n\r\n* Simplified `remote.Parse`\r\n* New `Knowns` type to manage builtin and user-encountered remotes\r\n* Better organization for checking remotes (by moving the functions to their respective `git` or `oci` packages)"}

{"timestamp":"1683372856","author":"verdverm","description":"merging this, all but one test passing locally, won't work until the last commit in this PR is merged\r\n\r\n(fetching the latest commit on _dev has error because of symlinks in a cue.mod/pkg dir)"}

{"timestamp":"1681911828","author":"verdverm","location":{"commit":"8ac0ae8c8773a125ed8f60407cb4de82badc405c","path":"lib/repos/remote/remote.go","range":{"startLine":81}},"description":"Will probably need auth here if the repo is private. Are you planning to refactor that code into this package or a separate one?\r\n"}

{"timestamp":"1681911875","author":"verdverm","location":{"commit":"8ac0ae8c8773a125ed8f60407cb4de82badc405c","path":"lib/repos/remote/remote.go","range":{"startLine":77}},"description":"We should also consider having a well-known list compiled into the binary as well as the file, so one cannot change github.com to be a OCI registry in the file on disk"}

{"timestamp":"1681912134","author":"verdverm","location":{"commit":"8ac0ae8c8773a125ed8f60407cb4de82badc405c","path":"lib/repos/remote/remote.go","range":{"startLine":37}},"description":"What is the benefit of making these types, and then having to cast strings to them where they are used, liken in `cache/fetch.go`"}

{"timestamp":"1681931957","author":"andrewhare","location":{"commit":"8ac0ae8c8773a125ed8f60407cb4de82badc405c","path":"lib/repos/remote/remote.go","range":{"startLine":37}},"description":"It makes for a cleaner API. I'm hoping that we can eventually refactor other parts of the system to know about these types (so casting won't be necessary)."}

{"timestamp":"1682309313","author":"verdverm","location":{"commit":"c362dcd6e061f2d947ca97febdda36f54ac84d6c","path":"lib/repos/remote/knowns.go","range":{"startLine":21}},"description":"the hof- here is redundant. I can see us expanding this to take patterns that map onto mirrors, including subpaths, so we can match regexp or something.\r\n\r\nWe'll still want some defaults here too ofc. But more to say, I can see what is stored in this file take on a different shape. So maybe a filename that might represent that better might be \"mirrors.json\". We should take an environment variable that explicitly the path to this file. I'd like to standardize around `HOF_\u003cAREA\u003e_\u003cTHING\u003e`, for this `HOF_MOD_MIRRORFILE`.\r\n\r\nWe actually have a function that can load any datafile, so they can choose the format.\r\n\r\nhttps://github.com/hofstadter-io/hof/blob/_dev/lib/datautils/io/io.go (There's more like it around in slightly different contexts, probably some inconsistency :/ )"}

{"timestamp":"1682309332","author":"verdverm","location":{"commit":"c362dcd6e061f2d947ca97febdda36f54ac84d6c","path":"lib/repos/git/fetch.go","range":{"startLine":25}},"description":"I want to think about this a bit more. Should we do the direct calls to gogit here? In most cases we want to avoid a network call. We should look in the cache first if possible. Maybe the cache should do the determination and we have one func that takes the params and returns the type? (rather than distributing the decision?)"}

{"timestamp":"1682309367","author":"verdverm","location":{"commit":"c362dcd6e061f2d947ca97febdda36f54ac84d6c","path":"lib/repos/remote/knowns.go","range":{"startLine":54}},"description":"we can embed the sync type here and call the functions directly on our type\r\n\r\n```\r\ntype Knowns struct {\r\n\tsync.RWMutex\r\n```\r\n\r\n```\r\n\tkn.RLock()\r\n\tdefer kn.RUnlock()\r\n```"}
