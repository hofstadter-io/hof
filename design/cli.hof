package hof

import (
  gen  "github.com/hofstadter-io/gen-cli-golang"

  "github.com/hofstadter-io/hof/commands"
)

// Meta information for the CLI
HofMetaInfo :: {
  Package:  "github.com/hofstadter-io/hof"
  Version:   "0.0.0"
}

// System-wide secret file for the Hof CLI
// Used to store credentials for the API
HofSecret :: gen.Secret & {
  Dir: "$HOME/.hof"
  File: "credentials.yaml"
}

// System-wide configuration for the Hof CLI
HofConfig :: gen.Config & {
  Dir: "$HOME/.hof"
  File: "config.yaml"
}

HofCli : gen.Cli & {
  // ...HofMetaInfo

  Name:    "hof"
  Config:  HofConfig
  Secret:  HofSecret

  Short: "HofLang framework CLI tool"

  // Should trim long-string prefix here
  Long: `
    HofLang is a language and transpiler
    for building data-centric DSLs and designs.
  `

  BashCompletion: true

  // For loading config/secret
  // TODO, infer this 
  PersistentPrerun: true

  // root command does nothing, prints help instead
  OmitRun: true

  Pflags: GlobalFlags

  // First level commands
  Commands: [
    // gen.VersionCommand(version),
    // gen.ConfigCommand(HofConfig),
    // ...gen.AuthCommand(HofConfig),

    commands.Auth,
    commands.Config,

    commands.New,
    commands.Gen,
    commands.Mod
    commands.Run,

    commands.Eval,
    commands.Vet,

    commands.Studios
    // commands.Hack,
  ]
}

// This is temporarily here for testing purposes
// The docs ones won't resolve
HofCliDocs :: gen.Command & gen.Docs & gen.DocsSite

// This would be better, like open/closed for generators
// Hof <= HofCli
Hof <- HofCli & {
  OutputDir: "output"
}

/*
All <= Hof, HofCliDocs

cmd GenAll(args) {
  bash: `
    rm -rf output
    hof gen Hof
    hof gen HfoCliDocs
  `
}
*/
