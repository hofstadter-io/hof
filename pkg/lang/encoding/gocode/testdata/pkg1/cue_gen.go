// Code generated by gocode.Generate; DO NOT EDIT.

package pkg1

import (
	"fmt"

	"github.com/hofstadter-io/hof/pkg/lang/encoding/gocode/gocodec"
	"github.com/hofstadter-io/hof/pkg/lang/hof"
)

var cuegenvalMyStruct = cuegenMake("MyStruct", &MyStruct{})

// Validate validates x.
func (x *MyStruct) Validate() error {
	return cuegenCodec.Validate(cuegenvalMyStruct, x)
}

// Complete completes x.
func (x *MyStruct) Complete() error {
	return cuegenCodec.Complete(cuegenvalMyStruct, x)
}

var cuegenvalOtherStruct = cuegenMake("OtherStruct", &OtherStruct{})

// Validate validates x.
func (x *OtherStruct) Validate() error {
	return cuegenCodec.Validate(cuegenvalOtherStruct, x)
}

var cuegenvalString = cuegenMake("String", nil)

// ValidateCUE validates x.
func (x String) ValidateCUE() error {
	return cuegenCodec.Validate(cuegenvalString, x)
}

var cuegenvalSpecialString = cuegenMake("SpecialString", nil)

// ValidateSpecialString validates x.
func ValidateSpecialString(x string) error {
	return cuegenCodec.Validate(cuegenvalSpecialString, x)
}

var cuegenvalPtr = cuegenMake("Ptr", Ptr(nil))

// ValidatePtr validates x.
func ValidatePtr(x Ptr) error {
	return cuegenCodec.Validate(cuegenvalPtr, x)
}

var cuegenCodec, cuegenInstance = func() (*gocodec.Codec, *cue.Instance) {
	var r *cue.Runtime
	r = &cue.Runtime{}
	instances, err := r.Unmarshal(cuegenInstanceData)
	if err != nil {
		panic(err)
	}
	if len(instances) != 1 {
		panic("expected encoding of exactly one instance")
	}
	return gocodec.New(r, nil), instances[0]
}()

// cuegenMake is called in the init phase to initialize CUE values for
// validation functions.
func cuegenMake(name string, x interface{}) cue.Value {
	f, err := cuegenInstance.LookupField(name)
	if err != nil {
		panic(fmt.Errorf("could not find type %q in instance", name))
	}
	v := f.Value
	if x != nil {
		w, err := cuegenCodec.ExtractType(x)
		if err != nil {
			panic(err)
		}
		v = v.Unify(w)
	}
	return v
}

// Data size: 546 bytes.
var cuegenInstanceData = []byte("\x01\x1f\x8b\b\x00\x00\x00\x00\x00\x00\xff\xacR_k\x13A\x10\u07f9D\xf0\x86*\xf8\x01\x84u\x9frbsI@\x84\xa3\xa7\xd6X\xa1\x0fm\x82U\x11\u0107\xedfsYz\xb9=\xee&b\xa9-\xa8\xb5\xf6K\u06d3\xfb\xd7F_5/;\x99\xdb\u07df\xd9\xf9\xdd)~:\xe0\x14\x97\f\x8ao\x8c=)\xbev\x006L\x92\x93L\x94~)I\x96}\xe8@\xf7\xb5\xb5\x04\x0e\x83\xeeT\xd2\x026\x18\xdczeb\x9dCq\xc1\x18\xbb_\xfcp\x00\xee~\xf8\xa8V\xba?7q\x83\xbc`P\x9c3\xd6+\xbew\x00n\xdf\xf4\xcf\x198\xd0\u0757K]\x12u\xab&2\u01ae:\xa2\xb8d\x0e\x00\x8c#C\x8b\xd5a_\u0665\xbf\xb0\xf3\x9c\xe4\x8ct\xb6il\xf9\xcfO\x8f\"?\x96I\xe4\xebD\u0659I\"?\xb2\xca\u03b4O:\xa7\x99$Y\xde\x18\x02\xc0\xbd\xf2\xf4\xdbq\xfaj\xa5\xe1\n~\xa5R\x1d\xc9H\xf3\xf2#\xa2Y\xa66#\xdeCW\xfc\xbb\xe8H\xa0+\x96\x92\x16\xe5\x99Sf\x92(\x17\xe8!\xee\x1d\x1fP\xb6R\x14\xf0\x13t\xb7\x03\u03b7\xc2\xe1\x00\xdd\x17\x01\xe7\xe1\x99P\x92\x04\xff\xc2\x1f\x8a\x99\x8d\x04\xba\x93g\x01\x9f\xd0Bg5\x06\xdd\u0740\x97nG\xfd\xdd\xca\xec\x9e\xc6S\xfe<\xb2\xbdG\xca.\xd3X\x93\x0e\xc7M\xe1\xe1\x1a\xb0\x15k\x8c\xf4\xc76!i\x92|;9\xee\x89\xf7\xc2Cw\x1a\u053cS\xa3\x8eJV<\xa8\xae\x06\xbc\xf9=\b\x85h\xebJ\xf0\x93\x8c\xcdL\x92\x0e\xdf5\xc5\xf8\ud387\a\xa9VF\xc6-8<\x13y\xdd\x115\x8a\x8eS\x1d\xd6.<\u070d\x12\x9b\xe97\v\x93W2\u1658[+p\xb24t\xad\u02f9I\xa8\xc2nz\xb8o\x93\x9d\xcf&\xa7\x8a\xfb\xa4z\xb4\x9a\xaby\x85M\x0f\xe7\xd6\x06%\x04\xa7\x94\xb5S\x97k\xe8\xef\xadb2i\xac'\xf3\xdep\xe0\xe1)2\xe6\xfc\x87p\x8d\x9ap\x8d\xfe\f\x97\\\x8b\xd6\xe8:Z7A\xc0v\u007f\xad\u01ed\xe1`\xb06\xd0_+\x92\x87J\x94\x9e\xeb\xed\x04\xfc\xe9cd\xecw\x00\x00\x00\xff\xffkS\xa0\xa4\xb2\x03\x00\x00")
