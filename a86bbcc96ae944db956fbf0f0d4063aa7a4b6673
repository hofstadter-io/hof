{"timestamp":"1626884853","author":"verdverm","description":"Generally speaking, I tried to follow the Golang model which prefers to use host APIs over the git protocol. I believe they will fall back to git if there are no APIs specified. This is for security reasons."}

{"timestamp":"1626888439","author":"b4nst","description":"\u003e Generally speaking, I tried to follow the Golang model which prefers to use host APIs over the git protocol. I believe they will fall back to git if there are no APIs specified. This is for security reasons.\r\n\r\nI was not aware of that. We need to think about how authenticating the APIs against private repositories then."}

{"timestamp":"1626891203","author":"verdverm","description":"Go falls back on git for private repos, there is special git config override for Go"}

{"timestamp":"1626891386","author":"verdverm","description":"Also, trying to keep this CUE Proposal in mind which will also be very Go like\r\n\r\nhttps://github.com/cue-lang/cue/issues/851"}

{"timestamp":"1626898339","author":"b4nst","description":"Yes, I'm actually using this for Cue projects so I'm also ðŸ’¯ to follow cue-lang/cue#851 "}

{"timestamp":"1626898803","author":"b4nst","description":"Go is using `GOPRIVATE` env var since 1.13 for private modules IIRC. Maybe we can use something similar here. For GitLab infinite nested level, I think you have to use the `.git` suffix. At least this is how I'm doing it, and the only way I know as for now.  "}

{"timestamp":"1627396825","author":"b4nst","description":"@verdverm I reverted the split and send it to its own function. This function now manage the `.git` extension so that if you set something like:\r\n\r\n```txtar\r\n-- cue.mod/module.cue --\r\nmodule: \"remote.my/owner/repo\"\r\n-- cue.mods --\r\nmodule remote.my/owner/repo\r\n\r\ncue v0.3.0\r\n\r\nrequire (\r\n  \"gitlab.com/nested/insanity/repo\" v0.0.0\r\n)\r\n\r\nreplace gitlab.com/nested/insanity/repo =\u003e gitlab.com/nested/insanity/repo.git v0.0.0\r\n```\r\n\r\n`hof mod vendor [cue]` will vendor the right repository. It's a bit verbose but not more than my go repositories.\r\n\r\nI've also added Zip download from API request for GitLab, in a way it has been done by you for GitHub.\r\n\r\nNow if that changes are ok with you, what I would want to do is to clean that a little bit, rely on `netrc` (with a fallback on plain git ssh) instead of some magic env var for private repositories. And detect private repositories from the `GOPRIVATE` environment variable. We'll have to decide if we go for plain git if the remote is GitHub or GitLab, or stay with the APIs and use the password extracted from netrc as token. If we do the former, we can safely drop the bit of code extracting auth from `os.Getenv` in the `yagu/repos/*`. I think go is doing plain git for private repository, not 100% sure tho"}

{"timestamp":"1627415032","author":"verdverm","description":"I'm not keen to rely on a `GO...` env var for all modders. Perhaps some of this per language / code host settings can be put in the modder config / schema? What do you think?"}

{"timestamp":"1627415625","author":"verdverm","description":"Thinking about auth, what are the various scenarios? How would this work in a CI system that might be different than local dev? (Do all the major CI systems rely on sshkeys to fetch private code?)"}

{"timestamp":"1627418522","author":"b4nst","description":"I think a `netrc` fallbacking to an `ssh` auth would give enough flexibility to tackle every systems without overthinking it. We could also implementing some sort of dynamic env, but in the end it's quite common to just echo the env in the netrc file for CI systems."}

{"timestamp":"1627418623","author":"verdverm","description":"https://stackoverflow.com/questions/6031214/git-how-to-use-netrc-file-on-windows-to-save-user-and-password\r\n\r\nI've typically seen CI systems using ENV VARS to expose credentials, typically through a secret system that prevents them from being printed"}

{"timestamp":"1627418774","author":"verdverm","description":"I'd say enabling ENV VARS like GITHUB_USER / GITHUB_PASS / GITHUB_APIKEY isn't pressing for this and is an easy addition if someone wants it"}

{"timestamp":"1627418970","author":"verdverm","description":"Is there a particular `netrc` lib to use, or will the underlying http / git.v5 packages take care of this automagically?"}

{"timestamp":"1627421926","author":"b4nst","description":"We can copy pasta the official [netrc.go](https://golang.org/src/cmd/go/internal/auth/netrc.go) since it's sadly not publicly exposed"}

{"timestamp":"1627925373","author":"b4nst","description":"@verdverm some news for you. `netrc` usage done, `*PRIVATE` env set dynamically on mod. The resolving model is not so dynamic tho, at it uses the go glob matching technique. That being said it works for both go and CUE (with `GOPRIVATE` and `CUEPRIVATE`)\r\n\r\nI've started to look at `cuelang.org/go` type repository. I think using an empty owner is fine. I just need to refactor URL building to always use some sort of `filepath` or `path` join function. "}

{"timestamp":"1627929724","author":"b4nst","description":"Ok should be gtg now"}

{"timestamp":"1627930005","author":"verdverm","description":"@b4nst nice\r\n\r\nCan you merge develop? I've setup GitHub Actions which will build and \"test\" (most tests are failing... which we won't worry about here) This is mostly so I can see if my PR setup is working, I recall there GH introducing something about first-time permissions due to abuse\r\n\r\nThis should show it at least building and running across the various platforms\r\n\r\nI'll give windows a manual try later tonight"}

{"timestamp":"1627930321","author":"b4nst","description":"@verdverm I did rebase `_dev`. I'm currently facing `1 workflow awaiting approval` so I guess there is something to do on your side to approve it, right?"}

{"timestamp":"1627930393","author":"verdverm","description":"@b4nst indeed, I had missed that and we should see it running now. Thanks!"}

{"timestamp":"1627930622","author":"verdverm","description":"@b4nst This looks really good, thanks for the contribution!\r\n\r\nI'm going to merge without manually testing on Windows and any issues I find I will open a separate ticket for.\r\n\r\nWould you like to open a separate PR for updating the docs? We could release a new patch version after that"}

{"timestamp":"1627930773","author":"verdverm","description":"It should only require\r\n\r\n- updating the help docs here: https://github.com/hofstadter-io/hof/blob/_dev/design/cli/cmds/mod.cue\r\n- regenerating the CLI (`hof gen`) from within the repo (also need to make sure the replaced modules are around for CUE)"}

{"timestamp":"1627934938","author":"b4nst","description":"@verdverm sure! I'll tackle that asap"}

{"timestamp":"1626806289","author":"b4nst","location":{"commit":"7a14a8a4b867cf01a673321840efaae4a5e7422d","path":"lib/mod/cache/fetch.go","range":{"startLine":38}},"description":"I added this because I found it difficult to guess were it was failing in the first time. "}

{"timestamp":"1626883687","author":"verdverm","location":{"commit":"8733464b4f5e3ccbd43a28b67f2f905aa25655c8","path":".gitignore","range":{"startLine":44}},"description":"Can we remove the 3 toptal lines?"}

{"timestamp":"1626883845","author":"verdverm","location":{"commit":"8733464b4f5e3ccbd43a28b67f2f905aa25655c8","path":"lib/mod/cache/fetch.go","range":{"startLine":82}},"description":"Let's remove the print statement if this is working"}

{"timestamp":"1626883921","author":"verdverm","location":{"commit":"8733464b4f5e3ccbd43a28b67f2f905aa25655c8","path":"lib/mod/cache/fetch.go","range":{"startLine":107}},"description":"Would this work for Windows? Didn't think that `~` worked there.\r\n\r\nI should be able to test it."}

{"timestamp":"1626884048","author":"verdverm","location":{"commit":"8733464b4f5e3ccbd43a28b67f2f905aa25655c8","path":"lib/mod/cache/fetch.go","range":{"startLine":137}},"description":"Might as well remove the commented out section rather than reformatting it"}

{"timestamp":"1626884062","author":"verdverm","location":{"commit":"8733464b4f5e3ccbd43a28b67f2f905aa25655c8","path":"lib/mod/modder/modder_vendor.go","range":{"startLine":127}},"description":"Might as well remove the commented out section rather than reformatting it"}

{"timestamp":"1626884187","author":"verdverm","location":{"commit":"8733464b4f5e3ccbd43a28b67f2f905aa25655c8","path":".gitignore","range":{"startLine":44}},"description":"Not really sure why any of this is here anyhow. I use vim and do not need this"}

{"timestamp":"1626884407","author":"verdverm","location":{"commit":"8733464b4f5e3ccbd43a28b67f2f905aa25655c8","path":"go.mod","range":{"startLine":31}},"description":"Can we pin this to the most recent semver:\r\nhttps://github.com/kevinburke/ssh_config/releases/tag/v1.1.0\r\n\r\nThis version seems out of date"}

{"timestamp":"1626884996","author":"b4nst","location":{"commit":"8733464b4f5e3ccbd43a28b67f2f905aa25655c8","path":".gitignore","range":{"startLine":44}},"description":"We can of course. This is there mostly because I did some dirty things and add a swap file, and I have the reflex of `gi vim \u003e\u003e .gitignore` when I see a swap file in the workdir. No prob to remove that if this is not ok with you."}

{"timestamp":"1626885136","author":"b4nst","location":{"commit":"8733464b4f5e3ccbd43a28b67f2f905aa25655c8","path":"lib/mod/cache/fetch.go","range":{"startLine":107}},"description":"Didn't have the chance to try on Windows. I'm not really a Windows user so it's really possible that we'll have to tweak this a little bit in order to fit in a standard Windows way of retrieving the right ssh key."}

{"timestamp":"1626885168","author":"verdverm","location":{"commit":"8733464b4f5e3ccbd43a28b67f2f905aa25655c8","path":"lib/mod/cache/lookup.go","range":{"startLine":13}},"description":"not sure how this works for monorepos, which may have more than 3 parts. I'm inclined to leave it the way it was and check if the length of `flds` equals 3 and print an error that this is not currently supported.\r\n\r\nAlso not sure if it would work for CUE repo either, which only has two components"}

{"timestamp":"1626885212","author":"b4nst","location":{"commit":"8733464b4f5e3ccbd43a28b67f2f905aa25655c8","path":"lib/mod/cache/fetch.go","range":{"startLine":137}},"description":"This is go fmt doing its magic, and I didn't want to remove a commented section I did not write. Wilco"}

{"timestamp":"1626885246","author":"verdverm","location":{"commit":"8733464b4f5e3ccbd43a28b67f2f905aa25655c8","path":"lib/mod/cache/fetch.go","range":{"startLine":24}},"description":"Same comment about reverting here"}

{"timestamp":"1626885325","author":"verdverm","location":{"commit":"8733464b4f5e3ccbd43a28b67f2f905aa25655c8","path":"lib/mod/cache/fetch.go","range":{"startLine":50}},"description":"Same comment about reverting"}

{"timestamp":"1626885590","author":"verdverm","location":{"commit":"8733464b4f5e3ccbd43a28b67f2f905aa25655c8","path":"lib/mod/cache/lookup.go","range":{"startLine":13}},"description":"Ah, I see this may be for the GitLab infamy? We should probably add a check for gitlab and try to fetch the archive file if that is your primary use case."}
