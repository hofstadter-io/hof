{"timestamp":"1626884853","author":"verdverm","description":"Generally speaking, I tried to follow the Golang model which prefers to use host APIs over the git protocol. I believe they will fall back to git if there are no APIs specified. This is for security reasons."}

{"timestamp":"1626888439","author":"b4nst","description":"\u003e Generally speaking, I tried to follow the Golang model which prefers to use host APIs over the git protocol. I believe they will fall back to git if there are no APIs specified. This is for security reasons.\r\n\r\nI was not aware of that. We need to think about how authenticating the APIs against private repositories then."}

{"timestamp":"1626891203","author":"verdverm","description":"Go falls back on git for private repos, there is special git config override for Go"}

{"timestamp":"1626891386","author":"verdverm","description":"Also, trying to keep this CUE Proposal in mind which will also be very Go like\r\n\r\nhttps://github.com/cue-lang/cue/issues/851"}

{"timestamp":"1626898339","author":"b4nst","description":"Yes, I'm actually using this for Cue projects so I'm also ðŸ’¯ to follow cue-lang/cue#851 "}

{"timestamp":"1626898803","author":"b4nst","description":"Go is using `GOPRIVATE` env var since 1.13 for private modules IIRC. Maybe we can use something similar here. For GitLab infinite nested level, I think you have to use the `.git` suffix. At least this is how I'm doing it, and the only way I know as for now.  "}
